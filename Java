import java.util.Scanner; 
 
public class FCFS { 
    public static void main(String[] args) { 
 
        System.out.println("Enter the number of process"); 
        Scanner in = new Scanner(System.in); 
        int numberOfProcesses = in.nextInt(); 
 
        int pid[] = new int[numberOfProcesses]; 
        int bt[] = new int[numberOfProcesses]; 
        int ar[] = new int[numberOfProcesses]; 
        int ct[] = new int[numberOfProcesses]; 
        int ta[] = new int[numberOfProcesses]; 
        int wt[] = new int[numberOfProcesses]; 
 
        for (int i = 0; i < numberOfProcesses; i++) { 
            System.out.println("Enter process " + (i + 1) + " arrival time: "); 
            ar[i] = in.nextInt(); 
            System.out.println("Enter process " + (i + 1) + " burst time: "); 
            bt[i] = in.nextInt(); 
            pid[i] = i + 1; 
        } 
 
        int temp; 
 
        // Sorting processes by arrival time 
        for (int i = 0; i < numberOfProcesses; i++) { 
            for (int j = i + 1; j < numberOfProcesses; j++) { 
                if (ar[i] > ar[j]) { 
                    // Swap arrival times 
                    temp = ar[i]; 
                    ar[i] = ar[j]; 
                    ar[j] = temp; 
 
                    // Swap process IDs 
                    temp = pid[i]; 
                    pid[i] = pid[j]; 
                    pid[j] = temp; 
 
                    // Swap burst times 
                    temp = bt[i]; 
                    bt[i] = bt[j]; 
                    bt[j] = temp; 
                } 
            } 
        } 
 
        // Calculating completion times 
        System.out.println(); 
        ct[0] = bt[0] + ar[0]; // First process completion time 
        for (int i = 1; i < numberOfProcesses; i++) { 
            ct[i] = ct[i - 1] + bt[i]; // Completion time for each subsequent process 
        } 
 
        // Calculating turnaround time and waiting time 
        for (int i = 0; i < numberOfProcesses; i++) { 
            ta[i] = ct[i] - ar[i]; // Turnaround time 
            wt[i] = ta[i] - bt[i]; // Waiting time 
        } 
 
        // Displaying the result 
        System.out.println("Process\t\tAT\t\tBT\t\tCT\t\tTAT\t\tWT"); 
        for (int i = 0; i < numberOfProcesses; i++) { 
            System.out.println(pid[i] + "\t\t\t" + ar[i] + "\t\t" + bt[i] + "\t\t" + ct[i] + "\t\t" + ta[i] + "\t\t" + 
wt[i]); 
        } 
 
        // Displaying the Gantt chart 
        System.out.println("Gantt chart: "); 
        for (int i = 0; i < numberOfProcesses; i++) { 
            System.out.print("P" + pid[i] + " "); 
        } 
    } 
} 
 

// Round Robin
import java.util.*; 
 
public class RoundRobin { 
    public static void main(String args[]) { 
        Scanner s = new Scanner(System.in); 
        int wtime[], btime[], rtime[], num, quantum; 
        wtime = new int[10]; 
        btime = new int[10]; 
        rtime = new int[10]; 
 
        System.out.print("Enter number of processes (MAX 10): "); 
        num = s.nextInt(); 
 
        System.out.println("Enter burst time for each process:"); 
        for (int i = 0; i < num; i++) { 
            System.out.print("P[" + (i + 1) + "]: "); 
            btime[i] = s.nextInt(); 
            rtime[i] = btime[i]; 
            wtime[i] = 0; 
        } 
 
        System.out.print("\nEnter quantum: "); 
        quantum = s.nextInt(); 
 
        int rp = num;  
        int i = 0; 
        int time = 0; 
         
        List<String> ganttChart = new ArrayList<>(); 
        List<Integer> ganttTime = new ArrayList<>(); 
        ganttTime.add(time); 
 
        while (rp != 0) { 
            if (rtime[i] > 0) { 
                if (rtime[i] > quantum) { 
                    time += quantum; 
                    rtime[i] -= quantum; 
                } else { 
                    time += rtime[i]; 
                    rtime[i] = 0; 
                    rp--; 
                } 
                ganttChart.add("P[" + (i + 1) + "]"); 
                ganttTime.add(time); 
            } 
 
            i++; 
            if (i == num) { 
                i = 0; 
            } 
        } 
 
        System.out.println("\n\nGantt Chart:"); 
        for (String process : ganttChart) { 
            System.out.print("|" + process + " "); 
        } 
        System.out.println("|"); 
 
        for (Integer t : ganttTime) { 
            System.out.print(t + " "); 
        } 
        System.out.println(); 
} 
} 
